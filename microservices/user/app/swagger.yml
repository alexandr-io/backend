basePath: /
consumes:
- application/json
definitions:
  BadInput:
    properties:
      fields:
        items:
          $ref: '#/definitions/field'
        type: array
        x-go-name: Fields
    type: object
    x-go-package: github.com/alexandr-io/backend_errors
  User:
    description: User defines the structure for an API user
    properties:
      email:
        description: The email address of this user
        example: john@provider.net
        type: string
        x-go-name: Email
      jwt:
        description: The authentication token of this user
        example: eyJhb[...]FYqf4
        type: string
        x-go-name: JWT
      username:
        description: The username of this user
        example: john
        type: string
        x-go-name: Username
    required:
    - username
    - email
    type: object
    x-go-package: github.com/Alexandr-io/Backend/User/data
  field:
    properties:
      name:
        type: string
        x-go-name: Name
      reason:
        type: string
        x-go-name: Reason
    type: object
    x-go-package: github.com/alexandr-io/backend_errors
  userLogin:
    properties:
      login:
        description: The email or the username of the user
        example: john@provider.net
        type: string
        x-go-name: Login
      password:
        description: The password of the user
        example: leHAiOjE1OTgzNz
        type: string
        x-go-name: Password
    required:
    - login
    - password
    title: userLogin is the body parameter given to login a new user.
    type: object
    x-go-package: github.com/Alexandr-io/Backend/User/handlers
  userRegister:
    properties:
      confirm_password:
        description: The confirmation password of the user
        example: leHAiOjE1OTgzNz
        type: string
        x-go-name: ConfirmPassword
      email:
        description: The email of the user
        example: john@provider.net
        type: string
        x-go-name: Email
      password:
        description: The password of the user
        example: leHAiOjE1OTgzNz
        type: string
        x-go-name: Password
      username:
        description: The username of the user
        example: john
        type: string
        x-go-name: Username
    required:
    - email
    - username
    - password
    - confirm_password
    title: userRegister is the body parameter given to register a new user to the database.
    type: object
    x-go-package: github.com/Alexandr-io/Backend/User/handlers
info:
  description: Documentation for User API
  title: of User API
  version: 1.0.0
paths:
  /auth:
    get:
      description: Try a simple connection with the given JWT
      operationId: auth
      responses:
        "200":
          $ref: '#/responses/authResponse'
        "401":
          $ref: '#/responses/unauthorizedErrorResponse'
      security:
      - Bearer: []
      tags:
      - USER
  /login:
    post:
      description: Login a user and return it's information and JWT
      operationId: login
      parameters:
      - description: The information to login a user
        in: body
        name: Body
        schema:
          $ref: '#/definitions/userLogin'
      responses:
        "200":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/badRequestErrorResponse'
      tags:
      - USER
  /register:
    post:
      description: Register a new user and return it's information and JWT
      operationId: register
      parameters:
      - description: The information to register a new user
        in: body
        name: Body
        schema:
          $ref: '#/definitions/userRegister'
      responses:
        "201":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/badRequestErrorResponse'
      tags:
      - USER
produces:
- application/json
responses:
  authResponse:
    description: A simple response from a simple route.
    schema:
      properties:
        username:
          description: The connected user's username
          example: john
          type: string
          x-go-name: Username
      required:
      - username
      type: object
  badRequestErrorResponse:
    description: A bad request error response.
    schema:
      $ref: '#/definitions/BadInput'
  unauthorizedErrorResponse:
    description: An unauthorized error response.
    schema:
      properties:
        error:
          description: The error message
          example: Invalid or expired JWT
          type: string
          x-go-name: Error
      required:
      - error
      type: object
  userResponse:
    description: A user return in a response.
    schema:
      $ref: '#/definitions/User'
schemes:
- http
securityDefinitions:
  Bearer:
    description: |
      For authentication, you need to send a JWT bearer token in the Header of the request. The JWT is given by the /register and /login routes.
    in: header
    name: Bearer
    type: Bearer
swagger: "2.0"

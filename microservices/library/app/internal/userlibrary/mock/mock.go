// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/userlibrary/interface.go

// Package mock_userlibrary is a generated GoMock package.
package mock_userlibrary

import (
	reflect "reflect"

	data "github.com/alexandr-io/backend/library/data"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadFromUserID mocks base method.
func (m *MockReader) ReadFromUserID(userID string) (*[]data.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUserID", userID)
	ret0, _ := ret[0].(*[]data.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromUserID indicates an expected call of ReadFromUserID.
func (mr *MockReaderMockRecorder) ReadFromUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUserID", reflect.TypeOf((*MockReader)(nil).ReadFromUserID), userID)
}

// ReadFromUserIDAndLibraryID mocks base method.
func (m *MockReader) ReadFromUserIDAndLibraryID(userID, libraryID primitive.ObjectID) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUserIDAndLibraryID", userID, libraryID)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromUserIDAndLibraryID indicates an expected call of ReadFromUserIDAndLibraryID.
func (mr *MockReaderMockRecorder) ReadFromUserIDAndLibraryID(userID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUserIDAndLibraryID", reflect.TypeOf((*MockReader)(nil).ReadFromUserIDAndLibraryID), userID, libraryID)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriter) Create(userLibrary data.UserLibrary) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userLibrary)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWriterMockRecorder) Create(userLibrary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriter)(nil).Create), userLibrary)
}

// Delete mocks base method.
func (m *MockWriter) Delete(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), id)
}

// Update mocks base method.
func (m *MockWriter) Update(library data.UserLibrary) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", library)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWriterMockRecorder) Update(library interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriter)(nil).Update), library)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(userLibrary data.UserLibrary) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userLibrary)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(userLibrary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), userLibrary)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// ReadFromUserID mocks base method.
func (m *MockRepository) ReadFromUserID(userID string) (*[]data.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUserID", userID)
	ret0, _ := ret[0].(*[]data.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromUserID indicates an expected call of ReadFromUserID.
func (mr *MockRepositoryMockRecorder) ReadFromUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUserID", reflect.TypeOf((*MockRepository)(nil).ReadFromUserID), userID)
}

// ReadFromUserIDAndLibraryID mocks base method.
func (m *MockRepository) ReadFromUserIDAndLibraryID(userID, libraryID primitive.ObjectID) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUserIDAndLibraryID", userID, libraryID)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromUserIDAndLibraryID indicates an expected call of ReadFromUserIDAndLibraryID.
func (mr *MockRepositoryMockRecorder) ReadFromUserIDAndLibraryID(userID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUserIDAndLibraryID", reflect.TypeOf((*MockRepository)(nil).ReadFromUserIDAndLibraryID), userID, libraryID)
}

// Update mocks base method.
func (m *MockRepository) Update(library data.UserLibrary) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", library)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(library interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), library)
}

// MockInternal is a mock of Internal interface.
type MockInternal struct {
	ctrl     *gomock.Controller
	recorder *MockInternalMockRecorder
}

// MockInternalMockRecorder is the mock recorder for MockInternal.
type MockInternalMockRecorder struct {
	mock *MockInternal
}

// NewMockInternal creates a new mock instance.
func NewMockInternal(ctrl *gomock.Controller) *MockInternal {
	mock := &MockInternal{ctrl: ctrl}
	mock.recorder = &MockInternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternal) EXPECT() *MockInternalMockRecorder {
	return m.recorder
}

// CreateUserLibrary mocks base method.
func (m *MockInternal) CreateUserLibrary(userLibrary data.UserLibrary) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLibrary", userLibrary)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserLibrary indicates an expected call of CreateUserLibrary.
func (mr *MockInternalMockRecorder) CreateUserLibrary(userLibrary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLibrary", reflect.TypeOf((*MockInternal)(nil).CreateUserLibrary), userLibrary)
}

// DeleteUserLibrary mocks base method.
func (m *MockInternal) DeleteUserLibrary(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserLibrary", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserLibrary indicates an expected call of DeleteUserLibrary.
func (mr *MockInternalMockRecorder) DeleteUserLibrary(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserLibrary", reflect.TypeOf((*MockInternal)(nil).DeleteUserLibrary), id)
}

// ReadUserLibraryFromUserID mocks base method.
func (m *MockInternal) ReadUserLibraryFromUserID(userID string) (*[]data.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserLibraryFromUserID", userID)
	ret0, _ := ret[0].(*[]data.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserLibraryFromUserID indicates an expected call of ReadUserLibraryFromUserID.
func (mr *MockInternalMockRecorder) ReadUserLibraryFromUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserLibraryFromUserID", reflect.TypeOf((*MockInternal)(nil).ReadUserLibraryFromUserID), userID)
}

// ReadUserLibraryFromUserIDAndLibraryID mocks base method.
func (m *MockInternal) ReadUserLibraryFromUserIDAndLibraryID(userID, libraryID primitive.ObjectID) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserLibraryFromUserIDAndLibraryID", userID, libraryID)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserLibraryFromUserIDAndLibraryID indicates an expected call of ReadUserLibraryFromUserIDAndLibraryID.
func (mr *MockInternalMockRecorder) ReadUserLibraryFromUserIDAndLibraryID(userID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserLibraryFromUserIDAndLibraryID", reflect.TypeOf((*MockInternal)(nil).ReadUserLibraryFromUserIDAndLibraryID), userID, libraryID)
}

// UpdateUserLibrary mocks base method.
func (m *MockInternal) UpdateUserLibrary(library data.UserLibrary) (*data.UserLibrary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLibrary", library)
	ret0, _ := ret[0].(*data.UserLibrary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserLibrary indicates an expected call of UpdateUserLibrary.
func (mr *MockInternalMockRecorder) UpdateUserLibrary(library interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLibrary", reflect.TypeOf((*MockInternal)(nil).UpdateUserLibrary), library)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/group/interface.go

// Package mock_group is a generated GoMock package.
package mock_group

import (
	reflect "reflect"

	permissions "github.com/alexandr-io/backend/library/data/permissions"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadFromIDAndLibraryID mocks base method.
func (m *MockReader) ReadFromIDAndLibraryID(groupID, libraryID primitive.ObjectID) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromIDAndLibraryID", groupID, libraryID)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromIDAndLibraryID indicates an expected call of ReadFromIDAndLibraryID.
func (mr *MockReaderMockRecorder) ReadFromIDAndLibraryID(groupID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromIDAndLibraryID", reflect.TypeOf((*MockReader)(nil).ReadFromIDAndLibraryID), groupID, libraryID)
}

// ReadFromIDListAndLibraryID mocks base method.
func (m *MockReader) ReadFromIDListAndLibraryID(groupIDs []primitive.ObjectID, libraryID primitive.ObjectID) (*[]permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromIDListAndLibraryID", groupIDs, libraryID)
	ret0, _ := ret[0].(*[]permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromIDListAndLibraryID indicates an expected call of ReadFromIDListAndLibraryID.
func (mr *MockReaderMockRecorder) ReadFromIDListAndLibraryID(groupIDs, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromIDListAndLibraryID", reflect.TypeOf((*MockReader)(nil).ReadFromIDListAndLibraryID), groupIDs, libraryID)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriter) Create(group permissions.Group) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", group)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWriterMockRecorder) Create(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriter)(nil).Create), group)
}

// Delete mocks base method.
func (m *MockWriter) Delete(groupID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), groupID)
}

// Update mocks base method.
func (m *MockWriter) Update(group permissions.Group) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", group)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWriterMockRecorder) Update(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriter)(nil).Update), group)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(group permissions.Group) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", group)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), group)
}

// Delete mocks base method.
func (m *MockRepository) Delete(groupID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), groupID)
}

// ReadFromIDAndLibraryID mocks base method.
func (m *MockRepository) ReadFromIDAndLibraryID(groupID, libraryID primitive.ObjectID) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromIDAndLibraryID", groupID, libraryID)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromIDAndLibraryID indicates an expected call of ReadFromIDAndLibraryID.
func (mr *MockRepositoryMockRecorder) ReadFromIDAndLibraryID(groupID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromIDAndLibraryID", reflect.TypeOf((*MockRepository)(nil).ReadFromIDAndLibraryID), groupID, libraryID)
}

// ReadFromIDListAndLibraryID mocks base method.
func (m *MockRepository) ReadFromIDListAndLibraryID(groupIDs []primitive.ObjectID, libraryID primitive.ObjectID) (*[]permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromIDListAndLibraryID", groupIDs, libraryID)
	ret0, _ := ret[0].(*[]permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromIDListAndLibraryID indicates an expected call of ReadFromIDListAndLibraryID.
func (mr *MockRepositoryMockRecorder) ReadFromIDListAndLibraryID(groupIDs, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromIDListAndLibraryID", reflect.TypeOf((*MockRepository)(nil).ReadFromIDListAndLibraryID), groupIDs, libraryID)
}

// Update mocks base method.
func (m *MockRepository) Update(group permissions.Group) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", group)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), group)
}

// MockInternal is a mock of Internal interface.
type MockInternal struct {
	ctrl     *gomock.Controller
	recorder *MockInternalMockRecorder
}

// MockInternalMockRecorder is the mock recorder for MockInternal.
type MockInternalMockRecorder struct {
	mock *MockInternal
}

// NewMockInternal creates a new mock instance.
func NewMockInternal(ctrl *gomock.Controller) *MockInternal {
	mock := &MockInternal{ctrl: ctrl}
	mock.recorder = &MockInternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternal) EXPECT() *MockInternalMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockInternal) AddUserToGroup(userID, groupID, libraryID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", userID, groupID, libraryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockInternalMockRecorder) AddUserToGroup(userID, groupID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockInternal)(nil).AddUserToGroup), userID, groupID, libraryID)
}

// CreateGroup mocks base method.
func (m *MockInternal) CreateGroup(group permissions.Group) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", group)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockInternalMockRecorder) CreateGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockInternal)(nil).CreateGroup), group)
}

// DeleteGroup mocks base method.
func (m *MockInternal) DeleteGroup(groupID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockInternalMockRecorder) DeleteGroup(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockInternal)(nil).DeleteGroup), groupID)
}

// ReadGroupFromIDAndLibraryID mocks base method.
func (m *MockInternal) ReadGroupFromIDAndLibraryID(groupID, libraryID primitive.ObjectID) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGroupFromIDAndLibraryID", groupID, libraryID)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGroupFromIDAndLibraryID indicates an expected call of ReadGroupFromIDAndLibraryID.
func (mr *MockInternalMockRecorder) ReadGroupFromIDAndLibraryID(groupID, libraryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGroupFromIDAndLibraryID", reflect.TypeOf((*MockInternal)(nil).ReadGroupFromIDAndLibraryID), groupID, libraryID)
}

// ReadGroupFromLibrary mocks base method.
func (m *MockInternal) ReadGroupFromLibrary(libraryID, userID primitive.ObjectID) (*[]permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGroupFromLibrary", libraryID, userID)
	ret0, _ := ret[0].(*[]permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGroupFromLibrary indicates an expected call of ReadGroupFromLibrary.
func (mr *MockInternalMockRecorder) ReadGroupFromLibrary(libraryID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGroupFromLibrary", reflect.TypeOf((*MockInternal)(nil).ReadGroupFromLibrary), libraryID, userID)
}

// UpdateGroup mocks base method.
func (m *MockInternal) UpdateGroup(group permissions.Group) (*permissions.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", group)
	ret0, _ := ret[0].(*permissions.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockInternalMockRecorder) UpdateGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockInternal)(nil).UpdateGroup), group)
}

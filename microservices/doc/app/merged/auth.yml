components:
  schemas:
    AuthRefresh:
      properties:
        refresh_token:
          description: The refresh token of the user
          example: eyJhb[...]FYqf4
          type: string
      required:
      - refresh_token
      title: authRefresh is the body parameter given to /auth/refresh call.
      type: object
    AuthResponse:
      content:
        application/json:
          schema:
            properties:
              username:
                description: The connected user's username
                example: john
                type: string
            required:
            - username
            type: object
      description: A simple response from a simple route
    BadInput:
      properties:
        fields:
          items:
            $ref: '#/components/schemas/Field'
          type: array
      type: object
    BadRequestErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadInput'
      description: Bad Request
    Field:
      properties:
        name:
          type: string
        reason:
          type: string
      type: object
    Invitation:
      content:
        application/json:
          schema:
            properties:
              invitation_token:
                description: The invitation token
                example: 8r0AH61nCF
                type: string
            required:
            - invitation_token
            type: object
      description: The invitation body
    NoContentResponse:
      description: Success No Content
    UnauthorizedErrorResponse:
      description: Unauthorized
    User:
      description: User defines the structure for an API user
      properties:
        auth_token:
          description: The authentication token of this user. Valid for 15 minutes.
          example: eyJhb[...]FYqf4
          type: string
        email:
          description: The email address of this user
          example: john@provider.net
          type: string
        refresh_token:
          description: The refresh token of this user. Valid for 30 days. Used to get a new auth token.
          example: eyJhb[...]FYqf4
          type: string
        username:
          description: The username of this user
          example: john
          type: string
      required:
      - username
      - email
      type: object
    UserDataResponse:
      content:
        application/json:
          schema:
            description: User's data
            properties:
              email:
                description: The email address of this user
                example: john@provider.net
                type: string
              username:
                description: The username of this user
                example: john
                type: string
            required:
            - username
            - email
            type: object
      description: User's data response
    UserLogin:
      properties:
        login:
          description: The email or the username of the user
          example: john@provider.net
          type: string
        password:
          description: The password of the user
          example: leHAiOjE1OTgzNz
          type: string
      required:
      - login
      - password
      title: UserLogin is the body parameter given to login a new user.
      type: object
    UserRegister:
      properties:
        confirm_password:
          description: The confirmation password of the user
          example: leHAiOjE1OTgzNz
          type: string
        email:
          description: The email of the user
          example: john@provider.net
          type: string
        invitation_token:
          description: The invitation token
          example: 8r0AH61nCF
          type: string
        password:
          description: The password of the user
          example: leHAiOjE1OTgzNz
          type: string
        username:
          description: The username of the user
          example: john
          type: string
      required:
      - email
      - username
      - password
      - confirm_password
      - invitation_token
      title: UserRegister is the body parameter given to register a new user to the database.
      type: object
    UserResetPassword:
      properties:
        new_password:
          description: the new password
          example: banana
          type: string
        token:
          description: the reset password token
          example: 64e5e3
          maxLength: 6
          minLength: 6
          type: string
      required:
      - token
      - new_password
      title: UserResetPassword is the body parameter given to /password/reset PUT route to reset a password.
      type: object
    UserResetPasswordToken:
      properties:
        token:
          description: the reset password token
          example: 64e5e3
          maxLength: 6
          minLength: 6
          type: string
      required:
      - token
      title: UserResetPasswordToken is the body parameter given to /password/reset GET route to reset a password.
      type: object
    UserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: User data with auth and refresh token
    UserSendResetPasswordEmail:
      properties:
        email:
          description: The email of the user to reset it's password
          example: john@provider.net
          type: string
      required:
      - email
      title: UserSendResetPasswordEmail is the body parameter given to /password/reset POST route to reset a password.
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: "Alexandrio backend is using both auth token and refresh token.\n\nThe auth token is used to access resources as an authenticated user. This token is only valid for 15 minutes for security purposes.  \nThe auth token is given by the [`/register`](#operation/register), [`/login`](#operation/login) and [`/auth/refresh`](#operation/refresh_token) routes.  \nYou need to send the auth token as a Bearer authentication token in the header of the request to access protected routes.\n\nThe refresh token is used to get a new auth token. When the auth token is expired, you need to send this refresh token to [`/auth/refresh`](#operation/refresh_token) to get a new auth and refresh token.  \nThe refresh token is valid for 30 days and can be used only once. The [`/auth/refresh`](#operation/refresh_token) route return a new refresh token.\n\n<div align=\"center\">\n  <img alt=\"Workflow\" src=\"https://i.imgur.com/ldrebnu.png\" />\n</div>\n<center><p style=\"font-size:11px\">Schema of the authentication workflow</p></center>\n"
      scheme: bearer
      type: http
info:
  description: |-
    Documentation for the Alexandrio's AUTH microsecervice REST API

     <b>You can find the documentation of the others MS in these pages:</b>

     <a href="http://localhost:4000/auth" class="sc-fzooss hmVskR">Auth</a> <a href="http://localhost:4000/user" class="sc-fzooss hmVskR">User</a> <a href="http://localhost:4000/library" class="sc-fzooss hmVskR">Library</a> <a href="http://localhost:4000/media" class="sc-fzooss hmVskR">Media</a>
  title: AUTH Documentation
  version: v1
openapi: 3.0.2
paths:
  /auth:
    get:
      description: Try a simple connection with the given auth token
      responses:
        "200":
          $ref: '#/components/schemas/AuthResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - bearerAuth: []
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Test Authentication
      tags:
      - AUTHENTICATION
  /invitation/{token}:
    delete:
      description: Delete an invitation corresponding to the given `token`. For test purpose only.
      responses:
        "204":
          $ref: '#/components/schemas/NoContentResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - bearerAuth: []
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Delete Invitation
      tags:
      - INVITATION
  /invitation/new:
    get:
      description: Get a new invitation token
      responses:
        "200":
          $ref: '#/components/schemas/Invitation'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: New Invitation
      tags:
      - INVITATION
  /login:
    post:
      description: Login a user and return it's information, auth token and refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        description: The information to login a user
      responses:
        "200":
          $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Login User
      tags:
      - AUTHENTICATION
  /logout:
    post:
      description: |-
        Logout a connected user.

        Invalidate the jwt auth token.

        Must be called before forgetting the auth jwt in front.
      responses:
        "204":
          $ref: '#/components/schemas/NoContentResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - bearerAuth: []
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Logout User
      tags:
      - AUTHENTICATION
  /password/reset:
    get:
      description: Check if the reset password token is valid and get user info.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetPasswordToken'
        description: The token to reset a password
      responses:
        "200":
          $ref: '#/components/schemas/UserDataResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Check Reset Token
      tags:
      - RESET PASSWORD
    post:
      description: Ask to reset a password. Will send an email with the code to reset the password in it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSendResetPasswordEmail'
        description: The email to reset a password
      responses:
        "204":
          $ref: '#/components/schemas/NoContentResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Ask Reset Password
      tags:
      - RESET PASSWORD
    put:
      description: Final step of password reset, after asking and checking a reset password token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetPassword'
        description: The new password and reset password token
      responses:
        "200":
          $ref: '#/components/schemas/UserResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Reset a Password
      tags:
      - RESET PASSWORD
  /refresh:
    post:
      description: Get a new auth and refresh token from a valid refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefresh'
        description: The information to refresh an auth and refresh token
      responses:
        "201":
          $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Refresh Token
      tags:
      - AUTHENTICATION
  /register:
    post:
      description: Register a new user and return it's information, auth token and refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        description: The information to register a new user
      responses:
        "201":
          $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      - description: Preprod server
        url: //auth.preprod.alexandrio.cloud
      summary: Register User
      tags:
      - AUTHENTICATION
tags:
- name: AUTHENTICATION
- name: INVITATION
- description: 'Schema of reset password workflow: <img src="https://i.imgur.com/qrqkPtO.png" />'
  name: RESET PASSWORD

components:
  schemas:
    AuthRefresh:
      properties:
        refresh_token:
          description: The refresh token of the user
          example: eyJhb[...]FYqf4
          type: string
      required:
      - refresh_token
      title: authRefresh is the body parameter given to /auth/refresh call.
      type: object
    AuthResponse:
      content:
        application/json:
          schema:
            properties:
              username:
                description: The connected user's username
                example: john
                type: string
            required:
            - username
            type: object
      description: A simple response from a simple route
    BadInput:
      properties:
        fields:
          items:
            $ref: '#/components/schemas/Field'
          type: array
      type: object
    BadRequestErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadInput'
      description: A bad request error response
    DownloadRequest:
      properties:
        book_id:
          description: The ID of the book on the Library MS
          example: tsDFYEf[...]deyFEY
          type: string
      required:
      - book_id
      title: DownloadRequest is the body parameter given to download a book.
      type: object
    DownloadResponse:
      content:
        application/pdf:
          schema:
            format: binary
            type: string
      description: File
    Field:
      properties:
        name:
          type: string
        reason:
          type: string
      type: object
    LibrariesNamesData:
      properties:
        id:
          example: 5fbfe5[...]7076844
          type: string
        name:
          example: My Library
          type: string
      type: object
    LibrariesNamesRetrieveResponse:
      content:
        application/json:
          schema:
            properties:
              libraries:
                $ref: '#/components/schemas/LibrariesNamesData'
                description: The list of libraries
                type: array
            required:
            - username
            type: object
      description: A list of the user libraries
    LibraryCreateRequest:
      properties:
        description:
          description: The description of the library
          example: A library with some books
          type: string
        name:
          description: The name of the library to create
          example: My Library
          type: string
      required:
      - name
      type: object
    LibraryCreateResponse:
      content:
        application/json:
          schema:
            properties:
              books:
                description: The list of books in the library
                example: []
              description:
                description: The description of the newly create library
                example: A library with some books
                type: string
              name:
                description: The name of the newly created library
                example: My Library
                type: string
            type: object
      description: A book object
    LibraryDeleteRequest:
      properties:
        name:
          description: The name of the library to create
          example: My Library
          type: string
      required:
      - name
      type: object
    LibraryDeleteResponse:
      type: object
    LibraryRetrieveRequest:
      properties:
        name:
          description: The name of the library to create
          example: My Library
          type: string
      required:
      - name
      type: object
    LibraryRetrieveResponse:
      content:
        application/json:
          schema:
            properties:
              books:
                description: The list of books in the library
                example: []
              description:
                description: The description of the newly create library
                example: A library with some books
                type: string
              name:
                description: The name of the newly created library
                example: My Library
                type: string
            type: object
      description: A book object
    UnauthorizedErrorResponse:
      description: Unauthorized
    UploadRequest:
      properties:
        book:
          description: The book to upload
          type: string
        book_id:
          description: The ID of the book on the Library MS
          example: tsDFYEf[...]deyFEY
          type: string
        library_id:
          description: The ID of the library where the metadata are located on the library MS
          example: nvrFIyH[...]KLkgj
          type: string
      required:
      - book
      - book_id
      - library_id
      title: UploadRequest is the body parameter given to upload a new book.
      type: object
    UploadResponse:
      description: A simple response from a simple route
    User:
      description: User defines the structure for an API user
      properties:
        auth_token:
          description: The authentication token of this user. Valid for 15 minutes.
          example: eyJhb[...]FYqf4
          type: string
        email:
          description: The email address of this user
          example: john@provider.net
          type: string
        refresh_token:
          description: The refresh token of this user. Valid for 30 days. Used to get a new auth token.
          example: eyJhb[...]FYqf4
          type: string
        username:
          description: The username of this user
          example: john
          type: string
      required:
      - username
      - email
      type: object
    UserData:
      description: User's data
      properties:
        email:
          description: The email address of this user
          example: john@provider.net
          type: string
        username:
          description: The username of this user
          example: john
          type: string
      type: object
    UserDataResponse:
      content:
        application/json:
          schema:
            description: User's data
            properties:
              email:
                description: The email address of this user
                example: john@provider.net
                type: string
              username:
                description: The username of this user
                example: john
                type: string
            required:
            - username
            - email
            type: object
      description: User's data response
    UserLogin:
      properties:
        login:
          description: The email or the username of the user
          example: john@provider.net
          type: string
        password:
          description: The password of the user
          example: leHAiOjE1OTgzNz
          type: string
      required:
      - login
      - password
      title: UserLogin is the body parameter given to login a new user.
      type: object
    UserRegister:
      properties:
        confirm_password:
          description: The confirmation password of the user
          example: leHAiOjE1OTgzNz
          type: string
        email:
          description: The email of the user
          example: john@provider.net
          type: string
        password:
          description: The password of the user
          example: leHAiOjE1OTgzNz
          type: string
        username:
          description: The username of the user
          example: john
          type: string
      required:
      - email
      - username
      - password
      - confirm_password
      title: UserRegister is the body parameter given to register a new user to the database.
      type: object
    UserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: User data with auth and refresh token
  securitySchemes:
    Bearer Auth:
      bearerFormat: JWT
      description: "Alexandrio backend is using both auth token and refresh token.\n\nThe auth token is used to access resources as an authenticated user. This token is only valid for 15 minutes for security purposes.  \nThe auth token is given by the [`/register`](#operation/register), [`/login`](#operation/login) and [`/auth/refresh`](#operation/refresh_token) routes.  \nYou need to send the auth token as a Bearer authentication token in the header of the request to access protected routes.\n\nThe refresh token is used to get a new auth token. When the auth token is expired, you need to send this refresh token to [`/auth/refresh`](#operation/refresh_token) to get a new auth and refresh token.  \nThe refresh token is valid for 30 days and can be used only once. The [`/auth/refresh`](#operation/refresh_token) route return a new refresh token.\n\n<div align=\"center\">\n  <img alt=\"Workflow\" src=\"https://i.imgur.com/ldrebnu.png\" />\n</div>\n<center><p style=\"font-size:11px\">Schema of the authentication workflow</p></center>\n"
      scheme: bearer
      type: https
info:
  description: Documentation for the Alexandrio's REST API
  title: REST API Documentation
openapi: 3.0.2
paths:
  /auth:
    get:
      description: Try a simple connection with the given auth token
      responses:
        "200":
          $ref: '#/components/schemas/AuthResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - Bearer Auth: []
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      summary: Test Authentication
      tags:
      - AUTH
  /book/download:
    get:
      description: Download a book from the server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadRequest'
      responses:
        "200":
          $ref: '#/components/schemas/DownloadResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - Bearer Auth: []
      servers:
      - description: Production server
        url: //media.alexandrio.cloud
      summary: Download a book
      tags:
      - MEDIA
  /book/upload:
    post:
      description: Upload a book to the server and link it to its metadata on the library MS
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        "200":
          $ref: '#/components/schemas/UploadResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - Bearer Auth: []
      servers:
      - description: Production server
        url: //media.alexandrio.cloud
      summary: Upload a book
      tags:
      - MEDIA
  /login:
    post:
      description: Login a user and return it's information, auth token and refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        description: The information to login a user
      responses:
        "200":
          $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      summary: Login User
      tags:
      - AUTH
  /refresh:
    post:
      description: Get a new auth and refresh token from a valid refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefresh'
        description: The information to refresh an auth and refresh token
      responses:
        "201":
          $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      summary: Refresh Token
      tags:
      - AUTH
  /register:
    post:
      description: Register a new user and return it's information, auth token and refresh token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        description: The information to register a new user
      responses:
        "201":
          $ref: '#/components/schemas/UserResponse'
        "400":
          $ref: '#/components/schemas/BadRequestErrorResponse'
      servers:
      - description: Production server
        url: //auth.alexandrio.cloud
      summary: Register User
      tags:
      - AUTH
  /user:
    get:
      description: Get the information about the user corresponding to the Bearer token
      responses:
        "200":
          $ref: '#/components/schemas/UserResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - Bearer Auth: []
      servers:
      - description: Production server
        url: //user.alexandrio.cloud
      summary: Get User
      tags:
      - USER
    put:
      description: Update the information of the user corresponding to the Bearer token
      operationId: user_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        description: "The informations to update a user  \nOnly sent fields will be updated"
      responses:
        "200":
          $ref: '#/components/schemas/UserDataResponse'
        "401":
          $ref: '#/components/schemas/UnauthorizedErrorResponse'
      security:
      - Bearer Auth: []
      servers:
      - description: Production server
        url: //user.alexandrio.cloud
      summary: Update User
      tags:
      - USER
schemes:
- http
tags:
- description: Micro service auth. Everything about the authentication
  name: AUTH
- description: Micro service user. Everything about the users
  name: USER

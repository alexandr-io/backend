// Code generated by MockGen. DO NOT EDIT.
// Source: ./email/email_grpc.pb.go

// Package mock_grpcemail is a generated GoMock package.
package mock_grpcemail

import (
	context "context"
	reflect "reflect"

	grpcemail "github.com/alexandr-io/backend/grpc/email"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockEmailClient is a mock of EmailClient interface.
type MockEmailClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientMockRecorder
}

// MockEmailClientMockRecorder is the mock recorder for MockEmailClient.
type MockEmailClientMockRecorder struct {
	mock *MockEmailClient
}

// NewMockEmailClient creates a new mock instance.
func NewMockEmailClient(ctrl *gomock.Controller) *MockEmailClient {
	mock := &MockEmailClient{ctrl: ctrl}
	mock.recorder = &MockEmailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailClient) EXPECT() *MockEmailClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailClient) SendEmail(ctx context.Context, in *grpcemail.SendEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailClientMockRecorder) SendEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailClient)(nil).SendEmail), varargs...)
}

// MockEmailServer is a mock of EmailServer interface.
type MockEmailServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServerMockRecorder
}

// MockEmailServerMockRecorder is the mock recorder for MockEmailServer.
type MockEmailServerMockRecorder struct {
	mock *MockEmailServer
}

// NewMockEmailServer creates a new mock instance.
func NewMockEmailServer(ctrl *gomock.Controller) *MockEmailServer {
	mock := &MockEmailServer{ctrl: ctrl}
	mock.recorder = &MockEmailServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServer) EXPECT() *MockEmailServerMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailServer) SendEmail(arg0 context.Context, arg1 *grpcemail.SendEmailRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServerMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailServer)(nil).SendEmail), arg0, arg1)
}

// mustEmbedUnimplementedEmailServer mocks base method.
func (m *MockEmailServer) mustEmbedUnimplementedEmailServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServer")
}

// mustEmbedUnimplementedEmailServer indicates an expected call of mustEmbedUnimplementedEmailServer.
func (mr *MockEmailServerMockRecorder) mustEmbedUnimplementedEmailServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServer", reflect.TypeOf((*MockEmailServer)(nil).mustEmbedUnimplementedEmailServer))
}

// MockUnsafeEmailServer is a mock of UnsafeEmailServer interface.
type MockUnsafeEmailServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailServerMockRecorder
}

// MockUnsafeEmailServerMockRecorder is the mock recorder for MockUnsafeEmailServer.
type MockUnsafeEmailServerMockRecorder struct {
	mock *MockUnsafeEmailServer
}

// NewMockUnsafeEmailServer creates a new mock instance.
func NewMockUnsafeEmailServer(ctrl *gomock.Controller) *MockUnsafeEmailServer {
	mock := &MockUnsafeEmailServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailServer) EXPECT() *MockUnsafeEmailServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailServer mocks base method.
func (m *MockUnsafeEmailServer) mustEmbedUnimplementedEmailServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServer")
}

// mustEmbedUnimplementedEmailServer indicates an expected call of mustEmbedUnimplementedEmailServer.
func (mr *MockUnsafeEmailServerMockRecorder) mustEmbedUnimplementedEmailServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServer", reflect.TypeOf((*MockUnsafeEmailServer)(nil).mustEmbedUnimplementedEmailServer))
}

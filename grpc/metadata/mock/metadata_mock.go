// Code generated by MockGen. DO NOT EDIT.
// Source: ./metadata/metadata_grpc.pb.go

// Package mock_grpcmetadata is a generated GoMock package.
package mock_grpcmetadata

import (
	context "context"
	reflect "reflect"

	grpcmetadata "github.com/alexandr-io/backend/grpc/metadata"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMetadataClient is a mock of MetadataClient interface.
type MockMetadataClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataClientMockRecorder
}

// MockMetadataClientMockRecorder is the mock recorder for MockMetadataClient.
type MockMetadataClientMockRecorder struct {
	mock *MockMetadataClient
}

// NewMockMetadataClient creates a new mock instance.
func NewMockMetadataClient(ctrl *gomock.Controller) *MockMetadataClient {
	mock := &MockMetadataClient{ctrl: ctrl}
	mock.recorder = &MockMetadataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataClient) EXPECT() *MockMetadataClientMockRecorder {
	return m.recorder
}

// Metadata mocks base method.
func (m *MockMetadataClient) Metadata(ctx context.Context, in *grpcmetadata.MetadataRequest, opts ...grpc.CallOption) (*grpcmetadata.MetadataReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Metadata", varargs...)
	ret0, _ := ret[0].(*grpcmetadata.MetadataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMetadataClientMockRecorder) Metadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMetadataClient)(nil).Metadata), varargs...)
}

// MockMetadataServer is a mock of MetadataServer interface.
type MockMetadataServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServerMockRecorder
}

// MockMetadataServerMockRecorder is the mock recorder for MockMetadataServer.
type MockMetadataServerMockRecorder struct {
	mock *MockMetadataServer
}

// NewMockMetadataServer creates a new mock instance.
func NewMockMetadataServer(ctrl *gomock.Controller) *MockMetadataServer {
	mock := &MockMetadataServer{ctrl: ctrl}
	mock.recorder = &MockMetadataServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataServer) EXPECT() *MockMetadataServerMockRecorder {
	return m.recorder
}

// Metadata mocks base method.
func (m *MockMetadataServer) Metadata(arg0 context.Context, arg1 *grpcmetadata.MetadataRequest) (*grpcmetadata.MetadataReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", arg0, arg1)
	ret0, _ := ret[0].(*grpcmetadata.MetadataReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMetadataServerMockRecorder) Metadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMetadataServer)(nil).Metadata), arg0, arg1)
}

// mustEmbedUnimplementedMetadataServer mocks base method.
func (m *MockMetadataServer) mustEmbedUnimplementedMetadataServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetadataServer")
}

// mustEmbedUnimplementedMetadataServer indicates an expected call of mustEmbedUnimplementedMetadataServer.
func (mr *MockMetadataServerMockRecorder) mustEmbedUnimplementedMetadataServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetadataServer", reflect.TypeOf((*MockMetadataServer)(nil).mustEmbedUnimplementedMetadataServer))
}

// MockUnsafeMetadataServer is a mock of UnsafeMetadataServer interface.
type MockUnsafeMetadataServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetadataServerMockRecorder
}

// MockUnsafeMetadataServerMockRecorder is the mock recorder for MockUnsafeMetadataServer.
type MockUnsafeMetadataServerMockRecorder struct {
	mock *MockUnsafeMetadataServer
}

// NewMockUnsafeMetadataServer creates a new mock instance.
func NewMockUnsafeMetadataServer(ctrl *gomock.Controller) *MockUnsafeMetadataServer {
	mock := &MockUnsafeMetadataServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetadataServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetadataServer) EXPECT() *MockUnsafeMetadataServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetadataServer mocks base method.
func (m *MockUnsafeMetadataServer) mustEmbedUnimplementedMetadataServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetadataServer")
}

// mustEmbedUnimplementedMetadataServer indicates an expected call of mustEmbedUnimplementedMetadataServer.
func (mr *MockUnsafeMetadataServerMockRecorder) mustEmbedUnimplementedMetadataServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetadataServer", reflect.TypeOf((*MockUnsafeMetadataServer)(nil).mustEmbedUnimplementedMetadataServer))
}

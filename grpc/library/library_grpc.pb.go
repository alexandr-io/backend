// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpclibrary

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibraryClient is the client API for Library service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryClient interface {
	// CreateLibrary is used to create the default library after a user creation
	CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UploadAuthorization check if a user can upload a book to a library
	UploadAuthorization(ctx context.Context, in *UploadAuthorizationRequest, opts ...grpc.CallOption) (*UploadAuthorizationReply, error)
	// BookUploaded set the file type of the uploaded book in the book metadata
	BookUploaded(ctx context.Context, in *BookUploadedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CoverUploaded set the url of the uploaded cover in the book metadata
	CoverUploaded(ctx context.Context, in *CoverUploadedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type libraryClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryClient(cc grpc.ClientConnInterface) LibraryClient {
	return &libraryClient{cc}
}

func (c *libraryClient) CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/library.Library/CreateLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) UploadAuthorization(ctx context.Context, in *UploadAuthorizationRequest, opts ...grpc.CallOption) (*UploadAuthorizationReply, error) {
	out := new(UploadAuthorizationReply)
	err := c.cc.Invoke(ctx, "/library.Library/UploadAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) BookUploaded(ctx context.Context, in *BookUploadedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/library.Library/BookUploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) CoverUploaded(ctx context.Context, in *CoverUploadedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/library.Library/CoverUploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServer is the server API for Library service.
// All implementations must embed UnimplementedLibraryServer
// for forward compatibility
type LibraryServer interface {
	// CreateLibrary is used to create the default library after a user creation
	CreateLibrary(context.Context, *CreateLibraryRequest) (*empty.Empty, error)
	// UploadAuthorization check if a user can upload a book to a library
	UploadAuthorization(context.Context, *UploadAuthorizationRequest) (*UploadAuthorizationReply, error)
	// BookUploaded set the file type of the uploaded book in the book metadata
	BookUploaded(context.Context, *BookUploadedRequest) (*empty.Empty, error)
	// CoverUploaded set the url of the uploaded cover in the book metadata
	CoverUploaded(context.Context, *CoverUploadedRequest) (*empty.Empty, error)
	mustEmbedUnimplementedLibraryServer()
}

// UnimplementedLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServer struct {
}

func (UnimplementedLibraryServer) CreateLibrary(context.Context, *CreateLibraryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLibrary not implemented")
}
func (UnimplementedLibraryServer) UploadAuthorization(context.Context, *UploadAuthorizationRequest) (*UploadAuthorizationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAuthorization not implemented")
}
func (UnimplementedLibraryServer) BookUploaded(context.Context, *BookUploadedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookUploaded not implemented")
}
func (UnimplementedLibraryServer) CoverUploaded(context.Context, *CoverUploadedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoverUploaded not implemented")
}
func (UnimplementedLibraryServer) mustEmbedUnimplementedLibraryServer() {}

// UnsafeLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServer will
// result in compilation errors.
type UnsafeLibraryServer interface {
	mustEmbedUnimplementedLibraryServer()
}

func RegisterLibraryServer(s grpc.ServiceRegistrar, srv LibraryServer) {
	s.RegisterService(&Library_ServiceDesc, srv)
}

func _Library_CreateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).CreateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.Library/CreateLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).CreateLibrary(ctx, req.(*CreateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_UploadAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).UploadAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.Library/UploadAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).UploadAuthorization(ctx, req.(*UploadAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_BookUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).BookUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.Library/BookUploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).BookUploaded(ctx, req.(*BookUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_CoverUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoverUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).CoverUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.Library/CoverUploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).CoverUploaded(ctx, req.(*CoverUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Library_ServiceDesc is the grpc.ServiceDesc for Library service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Library_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.Library",
	HandlerType: (*LibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLibrary",
			Handler:    _Library_CreateLibrary_Handler,
		},
		{
			MethodName: "UploadAuthorization",
			Handler:    _Library_UploadAuthorization_Handler,
		},
		{
			MethodName: "BookUploaded",
			Handler:    _Library_BookUploaded_Handler,
		},
		{
			MethodName: "CoverUploaded",
			Handler:    _Library_CoverUploaded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/library.proto",
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./library/library_grpc.pb.go

// Package mock_grpclibrary is a generated GoMock package.
package mock_grpclibrary

import (
	context "context"
	reflect "reflect"

	grpclibrary "github.com/alexandr-io/backend/grpc/library"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockLibraryClient is a mock of LibraryClient interface.
type MockLibraryClient struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryClientMockRecorder
}

// MockLibraryClientMockRecorder is the mock recorder for MockLibraryClient.
type MockLibraryClientMockRecorder struct {
	mock *MockLibraryClient
}

// NewMockLibraryClient creates a new mock instance.
func NewMockLibraryClient(ctrl *gomock.Controller) *MockLibraryClient {
	mock := &MockLibraryClient{ctrl: ctrl}
	mock.recorder = &MockLibraryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryClient) EXPECT() *MockLibraryClientMockRecorder {
	return m.recorder
}

// BookUploaded mocks base method.
func (m *MockLibraryClient) BookUploaded(ctx context.Context, in *grpclibrary.BookUploadedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BookUploaded", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookUploaded indicates an expected call of BookUploaded.
func (mr *MockLibraryClientMockRecorder) BookUploaded(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookUploaded", reflect.TypeOf((*MockLibraryClient)(nil).BookUploaded), varargs...)
}

// CoverUploaded mocks base method.
func (m *MockLibraryClient) CoverUploaded(ctx context.Context, in *grpclibrary.CoverUploadedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CoverUploaded", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoverUploaded indicates an expected call of CoverUploaded.
func (mr *MockLibraryClientMockRecorder) CoverUploaded(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverUploaded", reflect.TypeOf((*MockLibraryClient)(nil).CoverUploaded), varargs...)
}

// CreateLibrary mocks base method.
func (m *MockLibraryClient) CreateLibrary(ctx context.Context, in *grpclibrary.CreateLibraryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLibrary", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLibrary indicates an expected call of CreateLibrary.
func (mr *MockLibraryClientMockRecorder) CreateLibrary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibrary", reflect.TypeOf((*MockLibraryClient)(nil).CreateLibrary), varargs...)
}

// UploadAuthorization mocks base method.
func (m *MockLibraryClient) UploadAuthorization(ctx context.Context, in *grpclibrary.UploadAuthorizationRequest, opts ...grpc.CallOption) (*grpclibrary.UploadAuthorizationReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAuthorization", varargs...)
	ret0, _ := ret[0].(*grpclibrary.UploadAuthorizationReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAuthorization indicates an expected call of UploadAuthorization.
func (mr *MockLibraryClientMockRecorder) UploadAuthorization(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAuthorization", reflect.TypeOf((*MockLibraryClient)(nil).UploadAuthorization), varargs...)
}

// MockLibraryServer is a mock of LibraryServer interface.
type MockLibraryServer struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryServerMockRecorder
}

// MockLibraryServerMockRecorder is the mock recorder for MockLibraryServer.
type MockLibraryServerMockRecorder struct {
	mock *MockLibraryServer
}

// NewMockLibraryServer creates a new mock instance.
func NewMockLibraryServer(ctrl *gomock.Controller) *MockLibraryServer {
	mock := &MockLibraryServer{ctrl: ctrl}
	mock.recorder = &MockLibraryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryServer) EXPECT() *MockLibraryServerMockRecorder {
	return m.recorder
}

// BookUploaded mocks base method.
func (m *MockLibraryServer) BookUploaded(arg0 context.Context, arg1 *grpclibrary.BookUploadedRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookUploaded", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookUploaded indicates an expected call of BookUploaded.
func (mr *MockLibraryServerMockRecorder) BookUploaded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookUploaded", reflect.TypeOf((*MockLibraryServer)(nil).BookUploaded), arg0, arg1)
}

// CoverUploaded mocks base method.
func (m *MockLibraryServer) CoverUploaded(arg0 context.Context, arg1 *grpclibrary.CoverUploadedRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverUploaded", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CoverUploaded indicates an expected call of CoverUploaded.
func (mr *MockLibraryServerMockRecorder) CoverUploaded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverUploaded", reflect.TypeOf((*MockLibraryServer)(nil).CoverUploaded), arg0, arg1)
}

// CreateLibrary mocks base method.
func (m *MockLibraryServer) CreateLibrary(arg0 context.Context, arg1 *grpclibrary.CreateLibraryRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLibrary", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLibrary indicates an expected call of CreateLibrary.
func (mr *MockLibraryServerMockRecorder) CreateLibrary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibrary", reflect.TypeOf((*MockLibraryServer)(nil).CreateLibrary), arg0, arg1)
}

// UploadAuthorization mocks base method.
func (m *MockLibraryServer) UploadAuthorization(arg0 context.Context, arg1 *grpclibrary.UploadAuthorizationRequest) (*grpclibrary.UploadAuthorizationReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAuthorization", arg0, arg1)
	ret0, _ := ret[0].(*grpclibrary.UploadAuthorizationReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAuthorization indicates an expected call of UploadAuthorization.
func (mr *MockLibraryServerMockRecorder) UploadAuthorization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAuthorization", reflect.TypeOf((*MockLibraryServer)(nil).UploadAuthorization), arg0, arg1)
}

// mustEmbedUnimplementedLibraryServer mocks base method.
func (m *MockLibraryServer) mustEmbedUnimplementedLibraryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLibraryServer")
}

// mustEmbedUnimplementedLibraryServer indicates an expected call of mustEmbedUnimplementedLibraryServer.
func (mr *MockLibraryServerMockRecorder) mustEmbedUnimplementedLibraryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLibraryServer", reflect.TypeOf((*MockLibraryServer)(nil).mustEmbedUnimplementedLibraryServer))
}

// MockUnsafeLibraryServer is a mock of UnsafeLibraryServer interface.
type MockUnsafeLibraryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLibraryServerMockRecorder
}

// MockUnsafeLibraryServerMockRecorder is the mock recorder for MockUnsafeLibraryServer.
type MockUnsafeLibraryServerMockRecorder struct {
	mock *MockUnsafeLibraryServer
}

// NewMockUnsafeLibraryServer creates a new mock instance.
func NewMockUnsafeLibraryServer(ctrl *gomock.Controller) *MockUnsafeLibraryServer {
	mock := &MockUnsafeLibraryServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLibraryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLibraryServer) EXPECT() *MockUnsafeLibraryServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLibraryServer mocks base method.
func (m *MockUnsafeLibraryServer) mustEmbedUnimplementedLibraryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLibraryServer")
}

// mustEmbedUnimplementedLibraryServer indicates an expected call of mustEmbedUnimplementedLibraryServer.
func (mr *MockUnsafeLibraryServerMockRecorder) mustEmbedUnimplementedLibraryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLibraryServer", reflect.TypeOf((*MockUnsafeLibraryServer)(nil).mustEmbedUnimplementedLibraryServer))
}
